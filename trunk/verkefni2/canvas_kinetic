<!DOCTYPE html>
<html>
<head>
    <style type="text/css">
        #theCanvas {
            border: 1px solid #000;
        }

    </style>
    <script src="http://code.jquery.com/jquery-1.7.1.js"></script>
    <script src="kinetic-v3.6.2.min.js"></script>
    <script>
        var shapes = [];
        var factory = createRect;

        // OOP http://www.coolpage.com/developer/javascript/Correct%20OOP%20for%20Javascript.html
        Object.prototype.Inherits = function( parent )
        {
            if( arguments.length > 1 )
            {
                parent.apply( this, Array.prototype.slice.call( arguments, 1 ) );
            }
            else
            {
                parent.call( this );
            }
        }

        Function.prototype.Inherits = function( parent )
        {
            this.prototype = new parent();
            this.prototype.constructor = this;
        }

        ///////////////////////////////////////


        function writeMessage(messageLayer, message) {
            var context = messageLayer.getContext();
            messageLayer.clear();
            context.font = "18pt Calibri";
            context.fillStyle = "black";
            context.fillText(message, 10, 25);
        }

        //Rectangle.Inherits( Shape );
        function Rectangle(x, y) {
            return new Kinetic.Shape(function () {
                var ctx = this.getContext();
                this.x = x;
                this.y = y;
                this.endX = x;
                this.endY = y;
                ctx.strokeRect(this.x, this.y, this.endX, this.endY);
            }
            //this.Inherits( Shape, name );

        )}
        //Rectangle.prototype.constructor =
        Rectangle.prototype.constructor = new Kinetic.Shape(function () {
            var ctx = this.getContext();
            ctx.strokeRect(this.x, this.y, this.endX, this.endY);
        });
        Rectangle.prototype.SetEnd = function (x, y) {
            this.endX = x;
            this.endY = y;
        }

        function createRect(x, y) {
            return new Rectangle(x, y);
        }
        function setRect() {
            factory = createRect;
        }

        function Redraw(ctx) {
            ctx.clearRect(0, 0, 800, 400);
            for (var i = 0; i < shapes.length; i++) {
                shapes[i].Draw(ctx);
            }
        }

        $(document).ready(function () {
            var stage = new Kinetic.Stage("container", 578, 200);
            var shapesLayer = new Kinetic.Layer();
            var messageLayer = new Kinetic.Layer();

            var mouseIsDown = false;
           // var mousePos = stage.getMousePosition();

            var rectangle = new Rectangle( 100, 50 );

            /*
            var rectangle = new Kinetic.Shape(function () {
                var ctx = this.getContext();
                ctx.strokeRect(this.x, this.y, this.endX, this.endY);
            });
            */

            var triangle = new Kinetic.Shape(function () {
                var context = this.getContext();
                context.beginPath();
                context.lineWidth = 4;
                context.strokeStyle = "black";
                context.fillStyle = "#00D2FF";
                context.moveTo(120, 50);
                context.lineTo(250, 80);
                context.lineTo(150, 170);
                context.closePath();
                context.fill();
                context.stroke();
            });

            rectangle.on("mousedown", function () {

                var x = e.pageX - this.offsetLeft;
                var y = e.pageY - this.offsetTop;
                startX = x;
                startY = y;

                mouseIsDown = true;
                //var rectangle = new Rectangle( x, y );
                shapesLayer.add(rectangle);

                //shapes.push(factory(x, y));
                //$("#message").text("x: " + x + " y: " + y + " factory: " + factory);

            });

            rectangle.on("mousemove", function (e) {
                if (mouseIsDown) {
                    var x = e.pageX - this.offsetLeft;
                    var y = e.pageY - this.offsetTop;

                    var lastShape = shapes[ shapes.length - 1];

                    lastShape.SetEnd(x, y);

                    if (lastShape != undefined) {
                        lastShape.SetEnd(x, y);
                        shapesLayer.draw();
                        stage.draw();
                        //Redraw(context);
                    }
                }
            });

            rectangle.on("mouseup" , function(){
                mouseIsDown = false;
            })

            triangle.on("mouseout", function () {
                writeMessage(messageLayer, "Mouseout triangle");
            });

            triangle.on("mousemove", function () {
                var mousePos = stage.getMousePosition();
                var x = mousePos.x - 120;
                var y = mousePos.y - 50;
                writeMessage(messageLayer, "x: " + x + ", y: " + y);
            });

            shapesLayer.add(triangle);

            var circle = new Kinetic.Shape(function () {
                var canvas = this.getCanvas();
                var context = this.getContext();
                context.beginPath();
                context.arc(380, canvas.height / 2, 70, 0, Math.PI * 2, true);
                context.fillStyle = "red";
                context.fill();
                context.lineWidth = 4;
                context.stroke();
            });

            circle.on("mouseover", function () {
                writeMessage(messageLayer, "Mouseover circle");
            });
            circle.on("mouseout", function () {
                writeMessage(messageLayer, "Mouseout circle");
            });
            circle.on("mousedown", function () {
                writeMessage(messageLayer, "Mousedown circle");
            });
            circle.on("mouseup", function () {
                writeMessage(messageLayer, "Mouseup circle");
            });

            shapesLayer.add(circle);

            stage.add(shapesLayer);
            stage.add(messageLayer);
        });

    </script>
</head>
<body onmousedown="return false;">


<div id="container">
</div>
</body>

</html>